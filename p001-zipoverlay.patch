diff --git a/Combine_PValues_FDR.java b/Combine_PValues_FDR.java
index b82aaf4..011937e 100644
--- a/Combine_PValues_FDR.java
+++ b/Combine_PValues_FDR.java
@@ -369,7 +369,7 @@ public class Combine_PValues_FDR {
 				coverage_n[i]=new double[1+(chr_length[i]-shift_mut)/10000];
 			}
 			
-			FileInputStream in=new FileInputStream(file_coverage+shift_mut+".txt");//TODO: adapt file OK
+			java.io.InputStream in=ZipOverlay.fileInputStream(file_coverage+shift_mut+".txt");//TODO: adapt file OK
 			DataInputStream inn=new DataInputStream(in);
 			BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 			
@@ -586,7 +586,7 @@ public class Combine_PValues_FDR {
 	//read list of official gene symbols and initizalize look up tables to assign gene names to their official symbols
 	public static void read_symbol_list(){
 		try{
-			FileInputStream in=new FileInputStream(file_symbols);
+			java.io.InputStream in=ZipOverlay.fileInputStream(file_symbols);
 			DataInputStream inn=new DataInputStream(in);
 			BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 			input.readLine();
@@ -651,7 +651,7 @@ public class Combine_PValues_FDR {
 		try{
 			for (int i=0;i<chr.length;i++){
 				
-				FileInputStream in=new FileInputStream(file_genes+chr[i]+"_Hg19.bed");
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_genes+chr[i]+"_Hg19.bed");
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				String s="";
@@ -873,7 +873,7 @@ public class Combine_PValues_FDR {
 		try{
 			Hashtable<String,String> conversion_mir=new Hashtable<String,String>();
 			String s="";
-			FileInputStream in=new FileInputStream(file_transform_mir);
+			java.io.InputStream in=ZipOverlay.fileInputStream(file_transform_mir);
 			DataInputStream inn=new DataInputStream(in);
 			BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 			while((s=input.readLine())!=null){
@@ -883,12 +883,12 @@ public class Combine_PValues_FDR {
 			input.close();
 				
 			for (int k=0;k<entity2.length;k++){//path_expression.size()
-				if(!new File(file_expression+entity2[k]+".txt").exists()){
+				if(!ZipOverlay.exists(new File(file_expression+entity2[k]+".txt"))){
 					continue;
 				}
 				
-				in=new FileInputStream(file_expression+entity2[k]+".txt");//path_expression.get(k)
-				inn=new DataInputStream(in);
+				{ java.io.InputStream in1=ZipOverlay.fileInputStream(file_expression+entity2[k]+".txt");//path_expression.get(k)
+				inn=new DataInputStream(in1); }
 				input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
 				input.readLine();
@@ -927,12 +927,12 @@ public class Combine_PValues_FDR {
 			}
 			
 			for (int k=0;k<entity2.length;k++){//path_mir_expression.size()
-				if(!new File(file_expression+entity2[k]+"_mir.txt").exists()){
+				if(!ZipOverlay.exists(new File(file_expression+entity2[k]+"_mir.txt"))){
 					continue;
 				}
 				
-				in=new FileInputStream(file_expression+entity2[k]+"_mir.txt");//path_mir_expression.get(k)
-				inn=new DataInputStream(in);
+				{ java.io.InputStream in1=ZipOverlay.fileInputStream(file_expression+entity2[k]+"_mir.txt");//path_mir_expression.get(k)
+				inn=new DataInputStream(in1); }
 				input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
 				input.readLine();
diff --git a/CombinedStatistics_10.java b/CombinedStatistics_10.java
index 2387ac9..71ea25c 100644
--- a/CombinedStatistics_10.java
+++ b/CombinedStatistics_10.java
@@ -1455,7 +1455,7 @@ public class CombinedStatistics_10 {
 		try{
 			for (int chr_index=0;chr_index<chr.length;chr_index++){
 				chromatin_1000[chr_index]=new double[1+(chr_length[chr_index]-shift_mut)/1000][4];
-				FileInputStream in=new FileInputStream(file_epi_signal_1000+chr[chr_index]+"_"+shift_mut+".txt");
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_epi_signal_1000+chr[chr_index]+"_"+shift_mut+".txt");
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
@@ -1495,7 +1495,7 @@ public class CombinedStatistics_10 {
 			for (int chr_index=0;chr_index<chr.length;chr_index++){
 				
 				chromatin_10000[chr_index]=new double[1+(chr_length[chr_index]-shift_mut)/10000][4];
-				FileInputStream in=new FileInputStream(file_epi_signal_10000+chr[chr_index]+"_"+shift_mut+".txt");
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_epi_signal_10000+chr[chr_index]+"_"+shift_mut+".txt");
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
@@ -1605,7 +1605,7 @@ public class CombinedStatistics_10 {
 		}
 		
 		initiate( entity_sel,  shift_mut,  folder_auxiliary,  folder_significance, folder_annotation, folder_counts_all,  all_entities,files_donors, files_mut_snv, files_mut_indel);
-		if(!new File(folder_annotation).exists()){
+		if(!ZipOverlay.exists(new File(folder_annotation))){
 			return;
 		}
 		if(!new File(folder_auxiliary).exists()){
@@ -2526,7 +2526,7 @@ public class CombinedStatistics_10 {
 			//From Destructive Component
 			
 			ArrayList<int[]> exons=new ArrayList<int[]>();
-			FileInputStream in=new FileInputStream(file_exons);
+			java.io.InputStream in=ZipOverlay.fileInputStream(file_exons);
 			DataInputStream inn=new DataInputStream(in);
 			BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 			String s="";
@@ -2556,8 +2556,8 @@ public class CombinedStatistics_10 {
 				Hashtable<Integer,Integer> table_positions=new Hashtable<Integer,Integer>();
 				ArrayList<Position> positions=new ArrayList<Position>();
 			
-				in=new FileInputStream(file_as_annotation+chr[i]+".txt");
-				inn=new DataInputStream(in);
+				{ java.io.InputStream in1=ZipOverlay.fileInputStream(file_as_annotation+chr[i]+".txt");
+				inn=new DataInputStream(in1); }
 				input= new BufferedReader(new InputStreamReader(inn));
 				while((s=input.readLine())!=null){
 					String[] t=s.split("	");
@@ -4410,7 +4410,7 @@ public class CombinedStatistics_10 {
 				coverage_n[i]=new double[1+(chr_length[i]-shift_mut)/10000];
 			}
 			
-			FileInputStream in=new FileInputStream(file_coverage);
+			java.io.InputStream in=ZipOverlay.fileInputStream(file_coverage);
 			DataInputStream inn=new DataInputStream(in);
 			BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 			
@@ -4568,7 +4568,7 @@ public class CombinedStatistics_10 {
 				}
 				
 				if(entities.equals("Liver")){
-					FileInputStream in=new FileInputStream(file_exclude_regions_liver);
+					java.io.InputStream in=ZipOverlay.fileInputStream(file_exclude_regions_liver);
 					DataInputStream inn=new DataInputStream(in);
 					BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 					String s="";
@@ -4581,7 +4581,7 @@ public class CombinedStatistics_10 {
 					input.close();
 				}
 				else{
-					FileInputStream in=new FileInputStream(file_exclude_regions_non_liver);
+					java.io.InputStream in=ZipOverlay.fileInputStream(file_exclude_regions_non_liver);
 					DataInputStream inn=new DataInputStream(in);
 					BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 					String s="";
@@ -4779,7 +4779,7 @@ public class CombinedStatistics_10 {
 					}
 				}
 				
-				FileInputStream in=new FileInputStream(file_exclude_regions_non_liver);
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_exclude_regions_non_liver);
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				String s="";
@@ -5147,7 +5147,7 @@ public class CombinedStatistics_10 {
 				}
 				
 				for (int j=0;j<1+(chr_length[chr_index]-shift_mut)/1000000;j++){
-					FileInputStream in=new FileInputStream(file_dichotomous+chr[chr_index]+"_"+j+".txt");
+					java.io.InputStream in=ZipOverlay.fileInputStream(file_dichotomous+chr[chr_index]+"_"+j+".txt");
 					DataInputStream inn=new DataInputStream(in);
 					BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 					String s="";
@@ -5275,7 +5275,7 @@ public class CombinedStatistics_10 {
 			status=1;
 			try{
 				for (int j=0;j<1+(chr_length[chr_index]-shift_mut)/1000000;j++){
-					FileInputStream in=new FileInputStream(file_dichotomous+chr[chr_index]+"_"+j+".txt");
+					java.io.InputStream in=ZipOverlay.fileInputStream(file_dichotomous+chr[chr_index]+"_"+j+".txt");
 					DataInputStream inn=new DataInputStream(in);
 					BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 					String s="";
@@ -5359,7 +5359,7 @@ public class CombinedStatistics_10 {
 			status=1;
 			try{
 				Hashtable<Integer,Integer> table_code=new Hashtable<Integer,Integer>();
-				FileInputStream in=new FileInputStream(file_as_annotation+chr[chr_index]+".txt");
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_as_annotation+chr[chr_index]+".txt");
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
@@ -5449,7 +5449,7 @@ public class CombinedStatistics_10 {
 				int prev=-1;
 				int start=-1;
 				Hashtable<Integer,Integer> table_coding=new Hashtable<Integer,Integer>();
-				FileInputStream in=new FileInputStream(file_as_annotation+chr[chr_index]+".txt");
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_as_annotation+chr[chr_index]+".txt");
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
@@ -5674,8 +5674,8 @@ public class CombinedStatistics_10 {
 			try{
 				for (int j=0;j<chr_length[i]/1000000;j++){
 					Hashtable<String,double[]> table=new Hashtable<String,double[]>();
-					if(new File(file_splice_ai+chr[i]+"_"+(j+1)+".txt").exists()){
-						FileInputStream in=new FileInputStream(file_splice_ai+chr[i]+"_"+(j+1)+".txt");
+					if(ZipOverlay.exists(new File(file_splice_ai+chr[i]+"_"+(j+1)+".txt"))){
+						java.io.InputStream in=ZipOverlay.fileInputStream(file_splice_ai+chr[i]+"_"+(j+1)+".txt");
 						DataInputStream inn=new DataInputStream(in);
 						BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 						String s="";
@@ -5791,7 +5791,7 @@ public class CombinedStatistics_10 {
 	public static ArrayList<char[]> read_genome(String c){
 		ArrayList<char[]> genome=new ArrayList<char[]>();
 		try{
-			FileInputStream in=new FileInputStream(file_genome+c+".fa");//chr[i]
+			java.io.InputStream in=ZipOverlay.fileInputStream(file_genome+c+".fa");//chr[i]
 			DataInputStream inn=new DataInputStream(in);
 			BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 			input.readLine();
diff --git a/CombinedStatistics_100.java b/CombinedStatistics_100.java
index 1c9d40e..543b00a 100644
--- a/CombinedStatistics_100.java
+++ b/CombinedStatistics_100.java
@@ -1838,7 +1838,7 @@ public class CombinedStatistics_100 {
 		try{
 			for (int chr_index=0;chr_index<chr.length;chr_index++){
 				chromatin_1000[chr_index]=new double[1+(chr_length[chr_index]-shift_mut)/1000][4];
-				FileInputStream in=new FileInputStream(file_epi_signal_1000+chr[chr_index]+"_"+shift_mut+".txt");
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_epi_signal_1000+chr[chr_index]+"_"+shift_mut+".txt");
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
@@ -1877,7 +1877,7 @@ public class CombinedStatistics_100 {
 			for (int chr_index=0;chr_index<chr.length;chr_index++){
 				
 				chromatin_10000[chr_index]=new double[1+(chr_length[chr_index]-shift_mut)/10000][4];
-				FileInputStream in=new FileInputStream(file_epi_signal_10000+chr[chr_index]+"_"+shift_mut+".txt");
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_epi_signal_10000+chr[chr_index]+"_"+shift_mut+".txt");
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
@@ -1912,7 +1912,7 @@ public class CombinedStatistics_100 {
 			for (int chr_index=0;chr_index<chr.length;chr_index++){
 				
 				chromatin_100000[chr_index]=new double[1+(chr_length[chr_index]-shift_mut)/100000][4];
-				FileInputStream in=new FileInputStream(file_epi_signal_100000+chr[chr_index]+"_"+shift_mut+".txt");
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_epi_signal_100000+chr[chr_index]+"_"+shift_mut+".txt");
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
@@ -2093,7 +2093,7 @@ public class CombinedStatistics_100 {
 		}
 		
 		initiate(entity_sel, shift_mut, folder_auxiliary, folder_significance,folder_annotation,folder_counts_all, all_entities, files_donors,  files_mut_snv, files_mut_indel);
-		if(!new File(folder_annotation).exists()){
+		if(!ZipOverlay.exists(new File(folder_annotation))){
 			return;
 		}
 		if(!new File(folder_auxiliary).exists()){
@@ -3117,7 +3117,7 @@ public class CombinedStatistics_100 {
 			//Destructive Component
 			
 			ArrayList<int[]> exons=new ArrayList<int[]>();
-			FileInputStream in=new FileInputStream(file_exons);
+			java.io.InputStream in=ZipOverlay.fileInputStream(file_exons);
 			DataInputStream inn=new DataInputStream(in);
 			BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 			String s="";
@@ -3147,8 +3147,8 @@ public class CombinedStatistics_100 {
 				Hashtable<Integer,Integer> table_positions=new Hashtable<Integer,Integer>();
 				ArrayList<Position> positions=new ArrayList<Position>();
 			
-				in=new FileInputStream(file_as_annotation+chr[i]+".txt");
-				inn=new DataInputStream(in);
+				{ java.io.InputStream in1=ZipOverlay.fileInputStream(file_as_annotation+chr[i]+".txt");
+				inn=new DataInputStream(in1); }
 				input= new BufferedReader(new InputStreamReader(inn));
 				while((s=input.readLine())!=null){
 					String[] t=s.split("	");
@@ -5614,7 +5614,7 @@ public class CombinedStatistics_100 {
 				coverage_n[i]=new double[1+(chr_length[i]-shift_mut)/10000];
 			}
 			
-			FileInputStream in=new FileInputStream(file_coverage);
+			java.io.InputStream in=ZipOverlay.fileInputStream(file_coverage);
 			DataInputStream inn=new DataInputStream(in);
 			BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 			
@@ -5758,7 +5758,7 @@ public class CombinedStatistics_100 {
 				}
 				
 				if(entities.equals("Liver")){
-					FileInputStream in=new FileInputStream(file_exclude_regions_liver);
+					java.io.InputStream in=ZipOverlay.fileInputStream(file_exclude_regions_liver);
 					DataInputStream inn=new DataInputStream(in);
 					BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 					String s="";
@@ -5772,7 +5772,7 @@ public class CombinedStatistics_100 {
 					input.close();
 				}
 				else{
-					FileInputStream in=new FileInputStream(file_exclude_regions_non_liver);
+					java.io.InputStream in=ZipOverlay.fileInputStream(file_exclude_regions_non_liver);
 					DataInputStream inn=new DataInputStream(in);
 					BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 					String s="";
@@ -6035,7 +6035,7 @@ public class CombinedStatistics_100 {
 					}
 				}
 
-				FileInputStream in=new FileInputStream(file_exclude_regions_non_liver);
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_exclude_regions_non_liver);
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				String s="";
@@ -6389,7 +6389,7 @@ public class CombinedStatistics_100 {
 				}
 				
 				for (int j=0;j<1+(chr_length[chr_index]-shift_mut)/1000000;j++){
-					FileInputStream in=new FileInputStream(file_dichotomous+chr[chr_index]+"_"+j+".txt");
+					java.io.InputStream in=ZipOverlay.fileInputStream(file_dichotomous+chr[chr_index]+"_"+j+".txt");
 					DataInputStream inn=new DataInputStream(in);
 					BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 					String s="";
@@ -6520,7 +6520,7 @@ public class CombinedStatistics_100 {
 			status=1;
 			try{
 				for (int j=0;j<1+(chr_length[chr_index]-shift_mut)/1000000;j++){
-					FileInputStream in=new FileInputStream(file_dichotomous+chr[chr_index]+"_"+j+".txt");
+					java.io.InputStream in=ZipOverlay.fileInputStream(file_dichotomous+chr[chr_index]+"_"+j+".txt");
 					DataInputStream inn=new DataInputStream(in);
 					BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 					String s="";
@@ -6603,7 +6603,7 @@ public class CombinedStatistics_100 {
 			status=1;
 			try{
 				Hashtable<Integer,Integer> table_code=new Hashtable<Integer,Integer>();
-				FileInputStream in=new FileInputStream(file_as_annotation+chr[chr_index]+".txt");
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_as_annotation+chr[chr_index]+".txt");
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
@@ -6691,7 +6691,7 @@ public class CombinedStatistics_100 {
 				int prev=-1;
 				int start=-1;
 				Hashtable<Integer,Integer> table_coding=new Hashtable<Integer,Integer>();
-				FileInputStream in=new FileInputStream(file_as_annotation+chr[chr_index]+".txt");
+				java.io.InputStream in=ZipOverlay.fileInputStream(file_as_annotation+chr[chr_index]+".txt");
 				DataInputStream inn=new DataInputStream(in);
 				BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 				input.readLine();
@@ -6915,8 +6915,8 @@ public class CombinedStatistics_100 {
 			try{
 				for (int j=0;j<chr_length[i]/1000000;j++){
 					Hashtable<String,double[]> table=new Hashtable<String,double[]>();
-					if(new File(file_splice_ai+chr[i]+"_"+(j+1)+".txt").exists()){
-						FileInputStream in=new FileInputStream(file_splice_ai+chr[i]+"_"+(j+1)+".txt");
+					if(ZipOverlay.exists(new File(file_splice_ai+chr[i]+"_"+(j+1)+".txt"))){
+						java.io.InputStream in=ZipOverlay.fileInputStream(file_splice_ai+chr[i]+"_"+(j+1)+".txt");
 						DataInputStream inn=new DataInputStream(in);
 						BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 						String s="";
@@ -7047,7 +7047,7 @@ public class CombinedStatistics_100 {
 	public static ArrayList<char[]> read_genome(String c){
 		ArrayList<char[]> genome=new ArrayList<char[]>();
 		try{
-			FileInputStream in=new FileInputStream(file_genome+c+".fa");//chr[i]
+			java.io.InputStream in=ZipOverlay.fileInputStream(file_genome+c+".fa");//chr[i]
 			DataInputStream inn=new DataInputStream(in);
 			BufferedReader input= new BufferedReader(new InputStreamReader(inn));
 			input.readLine();
diff --git a/SignificanceNoncoding.java b/SignificanceNoncoding.java
index a8c34c1..c762841 100644
--- a/SignificanceNoncoding.java
+++ b/SignificanceNoncoding.java
@@ -87,7 +87,7 @@ public class SignificanceNoncoding {
 		}
 		
 		
-		if(!new File(folder_annotation).exists()){
+		if(!ZipOverlay.exists(new File(folder_annotation))){
 			System.out.println(folder_annotation+" does not exist");
 			return;
 		}
diff --git a/ZipOverlay.java b/ZipOverlay.java
new file mode 100644
index 0000000..07bb350
--- /dev/null
+++ b/ZipOverlay.java
@@ -0,0 +1,131 @@
+
+//
+// A simple overlay to emulate reads from Zip files on
+//  top of the filesystem for the reference data
+//
+
+public final class ZipOverlay {
+
+	private static String _pathStringBasename(String path) {
+		return new java.io.File(path).getName();
+	}
+
+	private static String _pathStringJoin(String path1, String path2) {
+		return String.format("%s%s%s", path1, java.io.File.separator, path2);
+	}
+
+	private static String _pathStringStripTrailingSeparators(String path) {
+		int len = path.length();
+		for (; len > 0; --len)
+			if (path.charAt(len - 1) != java.io.File.separatorChar)
+				break;
+
+		return path.substring(0, len);
+	}
+
+	private static interface _Object {
+		public java.io.InputStream fileInputStream() throws java.io.IOException;
+
+		public boolean exists();
+	}
+
+	private static class _FileObject implements _Object {
+		protected java.io.File _file = null;
+
+		public _FileObject(java.io.File file) {
+			_file = file;
+		}
+
+		public java.io.InputStream fileInputStream() throws java.io.FileNotFoundException {
+			return new java.io.FileInputStream(_file);
+		}
+
+		public boolean exists() {
+			return _file.exists();
+		}
+	}
+
+	private static class _ZipFileObject implements _Object {
+		protected java.util.zip.ZipFile _zipFile = null;
+		protected java.util.zip.ZipEntry _entry = null;
+
+		public _ZipFileObject(java.util.zip.ZipFile zipFile, java.util.zip.ZipEntry entry) {
+			_zipFile = zipFile;
+			_entry = entry;
+		}
+
+		public java.io.InputStream fileInputStream() throws java.io.IOException {
+			if (_entry.isDirectory())
+				// NB. throw for directories like FileInputStream()
+				throw new java.io.FileNotFoundException(String.format("%s (%s)", _pathStringBasename(_entry.getName()), "Is a directory"));
+
+			return _zipFile.getInputStream(_entry);
+		}
+
+		public boolean exists() {
+			return true;
+		}
+	}
+
+	private static _Object _locateFile(java.io.File file) throws java.io.IOException {
+		if (!file.exists()) {
+			String tail = null;
+
+			for (java.io.File parentFile = file;
+					parentFile != null;
+					parentFile = parentFile.getParentFile())
+			{
+				if (tail == null)
+					tail = parentFile.getName();
+				else
+					tail = _pathStringJoin(parentFile.getName(), tail);
+
+				java.io.File parentZipFile = new java.io.File(String.format("%s.zip", _pathStringStripTrailingSeparators(parentFile.getPath())));
+				if (!parentZipFile.exists())
+					continue;
+
+				java.util.zip.ZipFile zipFile;
+				try {
+					zipFile = new java.util.zip.ZipFile(parentZipFile);
+				}
+				catch (java.util.zip.ZipException error) {
+					// NB. not a zip or sth.. try next
+					continue;
+				}
+
+				java.util.zip.ZipEntry entry = zipFile.getEntry(tail);
+				if (entry == null)
+					// NB. not in zip.. try next
+					continue;
+
+				return new _ZipFileObject(zipFile, entry);
+			}
+		}
+
+		return new _FileObject(file);
+	}
+
+	public static java.io.InputStream fileInputStream(java.io.File file) throws java.io.IOException {
+		return _locateFile(file).fileInputStream();
+	}
+
+	public static java.io.InputStream fileInputStream(String name) throws java.io.IOException {
+		return fileInputStream(new java.io.File(name));
+	}
+
+	public static boolean exists(java.io.File file) {
+		try {
+			return _locateFile(file).exists();
+		}
+		catch (java.io.IOException error) {
+			// NB. File.exists() doesn't throw either, not sure what it does..
+			 // surely the result can be undetermined if i/o craps out
+			throw new java.lang.RuntimeException(error);
+		}
+	}
+
+	public static boolean exists(String name) {
+		return exists(new java.io.File(name));
+	}
+
+} // ZipOverlay
